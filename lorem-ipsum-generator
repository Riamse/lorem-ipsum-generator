#!/usr/bin/env python

import sys

import pygtk
pygtk.require("2.0")
import gtk
import gtk.glade

from lipsum import MarkupGenerator

class LoremIpsumGenerator:
    __generator = MarkupGenerator()

    def __init__(self):
        filename = 'lorem.glade'

        self.__w_tree = gtk.glade.XML(filename, "main")

        self.__main = self.__w_tree.get_widget("main")
        self.__spinbutton_sentence_mean = self.__w_tree.get_widget("spinbutton_sentence_mean")
        self.__spinbutton_sentence_mean.connect('changed', self.__set_sentence_mean)
        self.__spinbutton_sentence_sigma = self.__w_tree.get_widget("spinbutton_sentence_sigma")
        self.__spinbutton_sentence_sigma.connect('changed', self.__set_sentence_sigma)
        self.__spinbutton_paragraph_mean = self.__w_tree.get_widget("spinbutton_paragraph_mean")
        self.__spinbutton_paragraph_mean.connect('changed', self.__set_paragraph_mean)
        self.__spinbutton_paragraph_sigma = self.__w_tree.get_widget("spinbutton_paragraph_sigma")
        self.__spinbutton_paragraph_sigma.connect('changed', self.__set_paragraph_sigma)

        self.__button_reset = self.__w_tree.get_widget("button_reset")
        self.__button_reset.connect("clicked", self.__reset_statistics)
        self.__button_generate = self.__w_tree.get_widget("button_generate")
        self.__button_generate.connect("clicked", self.__generate_output)
        self.__button_copy = self.__w_tree.get_widget("button_copy")
        self.__button_copy.connect("clicked", self.__copy_output)
        self.__button_copy_exit = self.__w_tree.get_widget("button_copy_exit")
        self.__button_copy_exit.connect("clicked", self.__copy_exit_output)

        self.__spinbutton_quantity = self.__w_tree.get_widget("spinbutton_quantity")
        self.__radiobutton_quantity_paragraphs = self.__w_tree.get_widget("radiobutton_quantity_paragraphs")
        self.__radiobutton_quantity_sentences = self.__w_tree.get_widget("radiobutton_quantity_sentences")
        self.__radiobutton_format_plain = self.__w_tree.get_widget("radiobutton_format_plain")
        self.__radiobutton_format_html_paragraphs = self.__w_tree.get_widget("radiobutton_format_html_paragraphs")
        self.__radiobutton_format_html_list = self.__w_tree.get_widget("radiobutton_format_html_list")
        self.__checkbutton_start_with_lorem = self.__w_tree.get_widget("checkbutton_start_with_lorem")

        self.__filechooserbutton_sample = self.__w_tree.get_widget("filechooserbutton_sample")
        self.__filechooserbutton_sample.connect('selection-changed', self.__set_sample_file)
        self.__filechooserbutton_dictionary = self.__w_tree.get_widget("filechooserbutton_dictionary")
        self.__filechooserbutton_dictionary.connect('selection-changed', self.__set_dictionary_file)
        
        self.__textbuffer_output = gtk.TextBuffer()
        self.__textview_output = self.__w_tree.get_widget("textview_output")
        self.__textview_output.set_buffer(self.__textbuffer_output)
        self.__clipboard = gtk.Clipboard()
        
        self.__update_statistic_fields()
        
        self.__main.connect('destroy', gtk.main_quit)
        self.__main.show()
        gtk.main()

    def __generate_output(self, w):
        output = ''

        quantity = self.__spinbutton_quantity.get_value()
        start_with_lorem = self.__checkbutton_start_with_lorem.get_active()

        if self.__radiobutton_quantity_paragraphs.get_active():
            generate_plain = self.__generator.generate_paragraphs_plain
            generate_html_p = self.__generator.generate_paragraphs_html_p
            generate_html_li = self.__generator.generate_paragraphs_html_li
        else:
            generate_plain = self.__generator.generate_sentences_plain
            generate_html_p = self.__generator.generate_sentences_html_p
            generate_html_li = self.__generator.generate_sentences_html_li

        if self.__radiobutton_format_html_paragraphs.get_active():
            output = generate_html_p(quantity, start_with_lorem)
        elif self.__radiobutton_format_html_list.get_active():
            output = generate_html_li(quantity, start_with_lorem)
        else:
            output = generate_plain(quantity, start_with_lorem)

        self.__textbuffer_output.set_text(output)

    def __copy_output(self, w):
        self.__clipboard.set_text(
                self.__textbuffer_output.get_text(
                    self.__textbuffer_output.get_start_iter(),
                    self.__textbuffer_output.get_end_iter()
                    )
                )

    def __copy_exit_output(self, w):
        self.__copy_output(w)
        self.__main.destroy()

    def __set_sample_file(self, w):
        pass

    def __set_dictionary_file(self, w):
        pass

    def __set_sentence_mean(self, w):
        self.__generator.sentence_mean = self.__spinbutton_sentence_mean.get_value()

    def __set_sentence_sigma(self, w):
        self.__generator.sentence_sigma = self.__spinbutton_sentence_sigma.get_value()
        pass

    def __set_paragraph_mean(self, w):
        self.__generator.paragraph_mean = self.__spinbutton_paragraph_mean.get_value()

    def __set_paragraph_sigma(self, w):
        self.__generator.paragraph_sigma = self.__spinbutton_paragraph_sigma.get_value()

    def __reset_statistics(self, w):
        self.__generator.reset_statistics()
        self.__update_statistic_fields()

    def __update_statistic_fields(self):
        self.__spinbutton_sentence_mean.set_value(self.__generator.sentence_mean)
        self.__spinbutton_sentence_sigma.set_value(self.__generator.sentence_sigma)
        self.__spinbutton_paragraph_mean.set_value(self.__generator.paragraph_mean)
        self.__spinbutton_paragraph_sigma.set_value(self.__generator.paragraph_sigma)


def main(argv):
    w = LoremIpsumGenerator()

if __name__ == '__main__':
    main(sys.argv)
